;; solver : CVC5
;; version : CVC5 version 1.0.1
;; option : --check-models --produce-models --sygus-inst
;; Generated Bug Type : Crash Bug
(set-logic QF_SLIA)
(declare-fun s () String)
(declare-fun gQFhNL () Int)
(assert (and (<= gQFhNL 49) (<= (- 38) gQFhNL)))
(assert (ite (str.prefixof "-" (str.substr s (+ 1 1) (- (+ (+ 1 1) (+ (+ 1 1) 1)) (+ 1 1)))) (and (ite (= (- 1) (str.to_int (str.substr (str.substr s (+ 1 1) (- (+ (+ 1 1) (+ (+ 1 1) 1)) (+ 1 1))) 1 (- (str.len (str.substr s (+ 1 1) (- (+ (+ 1 1) (+ (+ 1 1) 1)) (+ 1 1)))) 1)))) false true) (> (str.len (str.substr s (+ 1 1) (- (+ (+ 1 1) (+ (+ 1 1) 1)) (+ 1 1)))) 1)) (ite (= (- 1) (str.to_int (str.substr s (+ 1 1) (- (+ (+ 1 1) (+ (+ 1 1) 1)) (+ 1 1))))) false true)))
(assert (not (= (str.at (str.substr s (+ 1 1) (- (+ (+ 1 1) (+ (+ 1 1) 1)) (+ 1 1))) 0) "0")))
(assert (not (= (str.len (str.substr s (+ 1 1) (- (+ (+ 1 1) (+ (+ 1 1) 1)) (+ 1 1)))) 1)))
(assert (= (str.len (str.substr s 1 (- (+ 1 1) 1))) 1))
(assert (= (str.len (str.substr s 0 (- 1 0))) 1))
(assert (<= (- (- (- (str.len s) 1) 1) (+ (+ 1 1) 1)) 3))
(assert (> (- (- (- (str.len s) 1) 1) (+ (+ 1 1) 1)) 0))
(assert (= (str.at (str.substr s (+ (+ 1 1) (+ 1 1)) (- (str.len s) (+ (+ 1 1) (+ 1 1)))) 0) "0"))
(assert (not (= (str.len (str.substr s (+ (+ 1 1) (+ 1 1)) (- (str.len s) (+ (+ 1 1) (+ 1 1))))) 1)))
(assert (<= (ite (str.prefixof "-" (str.substr s (+ 1 1) (- (+ (+ 1 1) (+ 1 1)) (+ 1 1)))) (- (str.to_int (str.substr (str.substr s (+ 1 1) (- (+ (+ 1 1) (+ 1 1)) (+ 1 1))) 1 (- (str.len (str.substr s (+ 1 1) (- (+ (+ 1 1) (+ 1 1)) (+ 1 1)))) 1)))) (str.to_int (str.substr s (+ 1 1) (- (+ (+ 1 1) (+ 1 1)) (+ 1 1))))) 255))
(assert (ite (str.prefixof "-" (str.substr s (+ 1 1) (- (+ (+ 1 1) (+ 1 1)) (+ 1 1)))) (and (ite (= (- 1) (str.to_int (str.substr (str.substr s (+ 1 1) (- (+ (+ 1 1) (+ 1 1)) (+ 1 1))) 1 (- (str.len (str.substr s (+ 1 1) (- (+ (+ 1 1) (+ 1 1)) (+ 1 1)))) 1)))) false true) (> (str.len (str.substr s (+ 1 1) (- (+ (+ 1 1) (+ 1 1)) (+ 1 1)))) 1)) (ite (= (- 1) (str.to_int (str.substr s (+ 1 1) (- (+ (+ 1 1) (+ 1 1)) (+ 1 1))))) false true)))
(assert (not (= (str.at (str.substr s (+ 1 1) (- (+ (+ 1 1) (+ 1 1)) (+ 1 1))) 0) "0")))
(assert (not (= (str.len (str.substr s (+ 1 1) (- (+ (+ 1 1) (+ 1 1)) (+ 1 1)))) 1)))
(assert (= (str.len (str.substr s 1 (- (+ 1 1) 1))) 1))
(assert (= (str.len (str.substr s 0 (- 1 0))) 1))
(assert (<= (- (- (- (str.len s) 1) 1) (+ 1 1)) 3))
(assert (> (- (- (- (str.len s) 1) 1) (+ 1 1)) 0))
(assert (= (str.at (str.substr s (+ (+ 1 1) 1) (- (str.len s) (+ (+ 1 1) 1))) 0) "0"))
(assert (not (= (str.len (str.substr s (+ (+ 1 1) 1) (- (str.len s) (+ (+ 1 1) 1)))) 1)))
(assert (= (str.len (str.substr s (+ 1 1) (- (+ (+ 1 1) 1) (+ 1 1)))) 1))
(assert (= (str.len (str.substr s 1 (- (+ 1 1) 1))) 1))
(assert (= (str.len (str.substr s 0 (- 1 0))) 1))
(assert (<= (- (- (- (str.len s) 1) 1) 1) 3))
(assert (> (- (- (- (str.len s) 1) 1) 1) 0))
(assert (str.in_re s (re.+ (re.range "0" "9"))))
(assert (not (> (str.len s) 12)))
(assert (not (= (str.len s) 0)))
(assert (<= (ite (str.prefixof "-" (str.substr s (+ 1 1) (- (+ (+ 1 1) (+ (+ 1 1) 1)) (+ 1 1)))) (- (str.to_int (str.substr (str.substr s (+ 1 1) (- (+ (+ 1 1) (+ (+ 1 1) 1)) (+ 1 1))) 1 (- (str.len (str.substr s (+ 1 1) (- (+ (+ 1 1) (- gQFhNL)) (+ 1 1)))) 1)))) (str.to_int (str.substr s (+ 1 1) (- (+ (+ 1 1) (+ (+ 1 1) 1)) (+ 1 1))))) 255))
(check-sat)
(get-model)