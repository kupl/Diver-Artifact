;; solver : Z3
;; version : Z3 - v 4.11.0  
;; option : model_validate=true 
;; Generated Bug Type : Soundness Bug (ex1_bug/z3_soundness_bug_4.smt2)
(set-info :smt-lib-version 2.6)
(set-logic QF_NRA)
(set-info :source |
Generated by: Casey Mulligan, Russell Bradford, James H. Davenport, Matthew England, and ZakTonks
Generated on: 2018-04-19
Generator: TheoryGuru
Application: Vector mode: Constant relative risk aversion, example set
Target solver: Z3
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)

; Code written by TheoryGuru
; Mulligan model #0084
;   is part of the example library included in "Quantifier Elimination for Reasoning in Economics" April 2018
;   by Mulligan, Bradford, Davenport, England, and Tonks
;   available at bathpaper.economicreasoning.com .
; Economics background for this and other examples is provided at examples.economicreasoning.com .

(declare-fun v1 () Real)
(declare-fun v2 () Real)
(declare-fun v3 () Real)
(declare-fun v4 () Real)
(declare-fun v5 () Real)
(declare-fun v6 () Real)
(declare-fun v7 () Real)
(declare-fun v8 () Real)
(declare-fun v9 () Real)
(declare-fun v10 () Real)
(declare-fun v11 () Real)
(declare-fun v12 () Real)

; input assumptions
(define-fun assumptions () Bool (and 
(= (+ (* v10 v2 v3) (* (- 1) v3 v5) (* v2 v3 v5) (* v3 v8) (* (- 2) v2 v3 v8)) 0)
(= (+ (* v10 v2 v3) (* v1 v10 v2 v3) (* v1 v10 v12 (* v3 v3)) (* (- 1) v3 v5) (* (- 1) v1 v3 v5) (* v2 v3 v5) (* v1 v2 v3 v5) (* v1 v12 (* v3 v3) v5) (* v3 v8) (* v1 v3 v8) (* (- 2) v2 v3 v8) (* (- 2) v1 v2 v3 v8) (* (- 2) v1 v12 (* v3 v3) v8)) 0)
(< (+ (* v10 (* v3 v3) v4) (* (* v3 v3) v4 v5) (* (- 2) (* v3 v3) v4 v8)) 0)
(> v3 0)
(>= v2 0)
(<= v2 1)
(> v1 0)
(>= v6 0)
(>= v9 0)
(>= v11 0)
(>= (* v6 v9) (* v7 v7))
(>= (* v11 v6) (* v8 v8))
(>= (* v11 v9) (* v10 v10))
(>= (+ (* 2 v10 v7 v8) (* v11 v6 v9)) (+ (* (* v10 v10) v6) (* v11 (* v7 v7)) (* (* v8 v8) v9)))
(>= v4 1)
(>= (* v11 v4) (* v5 v5))
))

; input hypothesis
(define-fun hypothesis () Bool
(= v12 0)
)

(assert assumptions)
(assert hypothesis)
(check-sat) ; checking the existence of an example to assumptions => hypothesis


(exit)
